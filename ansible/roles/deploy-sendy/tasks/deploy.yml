---
## Application deployment
- name: create base deploy path folder
  file: >
    path={{ deploy_path }}
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: create certs folder
  file: >
    path="{{ deploy_path }}/certs"
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: create .composer folder
  file: >
    path="~/.composer"
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: synchronize files to Zanichelli application folder
  synchronize:
    src: src/
    dest: "{{ deploy_path }}"
    checksum: yes
    archive: no
    delete: no
    recursive: yes
    use_ssh_args: yes
    rsync_opts:
      - "-v"
      - "--exclude=*.git"
      - "--exclude=.git*"
      - "--include=*"

- name: Copy across new env file for the laravel app
  template: src=.env.j2
    dest={{ deploy_path }}/.env

- name: Copy across new cert file 1
  template: src=star_certificate.crt
    dest={{ deploy_path }}/certs/star_certificate.crt

- name: Copy across new cert file 2
  template: src=star_certificate.key
    dest={{ deploy_path }}/certs/star_certificate.key

- name: Copy across oauth_public.key
  template: src=oauth-public.key
    dest={{ deploy_path }}/storage/oauth-public.key

- name: Copy across oauth_private.key
  template: src=oauth-private.key
    dest={{ deploy_path }}/storage/oauth-private.key

- name: adding existing user 'user' to group docker
  become: yes
  user:
    name: "{{ remote_user }}"
    groups: docker
    append: yes

- name: reset connection for user ubuntu
  meta: reset_connection

- name: Remove the containers
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml down"
  ignore_errors: yes
  args:
    chdir: "{{ deploy_path }}"

- name: Change file ownership, group and permissions
  ansible.builtin.file:
    path: public/mix-manifest.json
    owner: "{{ remote_user }}"
    group: docker
    mode: '0664'

- name: Start and build the containers
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml up -d --build"
  args:
    chdir: "{{ deploy_path }}"

- name: Install npm
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml run --rm nodejs npm install"
  args:
    chdir: "{{ deploy_path }}"

- name: Run npm
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml run --rm nodejs npm run prod"
  args:
    chdir: "{{ deploy_path }}"

- name: Run composer install
  command: "/usr/bin/docker exec sendy_app composer install"

- name: Run migrations
  command: "/usr/bin/docker exec sendy_app php artisan migrate --force"

- name: Copy public files into nginx container
  command: "docker cp sendy_app:/var/www/public/. ./public/"
  become: yes
  args:
    chdir: "{{ deploy_path }}"

- name: Copy public folder into sendy_web public folder
  command: "docker cp ./public/. sendy_web:/var/www/public/"
  args:
    chdir: "{{ deploy_path }}"

- name: Copy public files into sendy_app container
  command: "docker cp ./public/. sendy_app:/var/www/public/"
  args:
    chdir: "{{ deploy_path }}"

- name: Reload builded files
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml up -d --build"
  args:
    chdir: "{{ deploy_path }}"