---
## Application deployment
- name: create base deploy path folder
  file: >
    path={{ deploy_path }}
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: create certs folder
  file: >
    path="{{ deploy_path }}/certs"
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: create .composer folder
  file: >
    path="~/.composer"
    state=directory
    group={{ remote_user }}
    owner={{ remote_user }}

- name: synchronize files to Zanichelli application folder
  synchronize:
    src: src/
    dest: "{{ deploy_path }}"
    checksum: yes
    archive: no
    delete: no
    recursive: yes
    use_ssh_args: yes
    rsync_opts:
      - "-v"
      - "--exclude=*.git"
      - "--exclude=.git*"
      - "--include=*"

- name: Copy across new env file for the laravel app
  template: src=.env.j2
    dest={{ deploy_path }}/.env

- name: Copy across new cert file 1
  template: src=star_certificate.crt
    dest={{ deploy_path }}/certs/star_certificate.crt

- name: Copy across new cert file 2
  template: src=star_certificate.key
    dest={{ deploy_path }}/certs/star_certificate.key

- name: adding existing user 'root' to group docker
  become: yes
  user:
    name: "{{ remote_user }}"
    groups: docker
    append: yes

- name: reset connection for user ubuntu
  meta: reset_connection

- name: Evaluate deploy type
  include_role:
    name: set-deploy-type

- name: Start and rebuild the containers
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml up -d --build"
  args:
    chdir: "{{ deploy_path }}"
  when: count_sendy_images.stdout|int == 0 or count_sendy_images.stdout|int == 1

- name: Remove the containers
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml down"
  args:
    chdir: "{{ deploy_path }}"
  ignore_errors: yes
  when: deploy_type|string == 'fix_build_tag'

- name: Remove app volume
  command: "/usr/bin/docker volume rm sendy_app"
  ignore_errors: yes
  when: deploy_type|string == 'fix_build_tag'

- name: Backup latest image
  command: "/usr/bin/docker tag sendy_app:latest sendy_app:previous"

# TODO: handle different tag versions
- name: Build sendy app image
  command: "/usr/bin/docker build -t sendy_app:v1 -f app-prod.dockerfile ."
  args:
    chdir: "{{ deploy_path }}"

- name: Update latest image
  command: "/usr/bin/docker tag sendy_app:v1 sendy_app:latest"

- name: Recreate containers using new latest image
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml up -d"
  args:
    chdir: "{{ deploy_path }}"

- name: Install npm
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml run --rm nodejs npm install"
  args:
    chdir: "{{ deploy_path }}"

- name: Run npm
  command: "/usr/local/bin/docker-compose -f {{ deploy_path }}/docker-compose.prod.yml run --rm nodejs npm run prod"
  args:
    chdir: "{{ deploy_path }}"

- name: Run composer install
  command: "/usr/bin/docker exec sendy_app composer install"

- name: Run migrations
  command: "/usr/bin/docker exec sendy_app php artisan migrate --force"
